name: Test invoke.py pip
on:
  push:
    branches:
      - 'main'
      - 'development'
  pull_request:

jobs:
  matrix:
    strategy:
      matrix:
        stable-diffusion-model:
          - diffusers-1.4
        requirements-file:
          - requirements-lin-cuda.txt
          - requirements-lin-amd.txt
          - requirements-mac-mps-cpu.txt
        python-version:
          # - '3.9'
          - '3.10'
        include:
          - requirements-file: requirements-lin-cuda.txt
            os: ubuntu-latest
            default-shell: bash -l {0}
          - requirements-file: requirements-lin-amd.txt
            os: ubuntu-latest
            default-shell: bash -l {0}
          - requirements-file: requirements-mac-mps-cpu.txt
            os: macOS-12
            default-shell: bash -l {0}
    name: ${{ matrix.requirements-file }} on ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.default-shell }}
    env:
      INVOKEAI_ROOT: '${{ github.workspace }}/invokeai'
      PYTHONUNBUFFERED: 1
      HAVE_SECRETS: ${{ secrets.HUGGINGFACE_TOKEN != '' }}
    steps:
      - name: Checkout sources
        id: checkout-sources
        uses: actions/checkout@v3

      - name: create models.yaml from example
        run: |
          mkdir -p ${{ env.INVOKEAI_ROOT }}/configs
          cp configs/models.yaml.example ${{ env.INVOKEAI_ROOT }}/configs/models.yaml

      - name: Use Cached Stable Diffusion Model
        id: cache-sd-model
        uses: actions/cache@v3
        env:
          cache-name: huggingface-${{ matrix.stable-diffusion-model }}
        with:
          path: ~/.cache/huggingface
          key: ${{ env.cache-name }}

      - name: set test prompt to main branch validation
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "TEST_PROMPTS=tests/preflight_prompts.txt" >> $GITHUB_ENV

      - name: set test prompt to development branch validation
        if: ${{ github.ref == 'refs/heads/development' }}
        run: echo "TEST_PROMPTS=tests/dev_prompts.txt" >> $GITHUB_ENV

      - name: set test prompt to Pull Request validation
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/development' }}
        run: echo "TEST_PROMPTS=tests/validate_pr_prompt.txt" >> $GITHUB_ENV

      - name: create requirements.txt
        run: cp 'environments-and-requirements/${{ matrix.requirements-file }}' '${{ matrix.requirements-file }}'

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: ${{ matrix.requirements-file }}

      # - name: install dependencies
      #   run: ${{ env.pythonLocation }}/bin/pip install --upgrade pip setuptools wheel

      - name: install requirements
        run: ${{ env.pythonLocation }}/bin/pip install -r '${{ matrix.requirements-file }}'

      - name: run configure_invokeai.py
        id: run-preload-models
        run: |
          if [ "${HAVE_SECRETS}" == true ] ; then
            mkdir -p ~/.huggingface
            echo -n '${{ secrets.HUGGINGFACE_TOKEN }}' > ~/.huggingface/token
          fi
          ${{ env.pythonLocation }}/bin/python scripts/configure_invokeai.py \
              --no-interactive --yes \
              --full-precision  # can't use fp16 weights without a GPU

      - name: cat ~/.invokeai
        id: cat-invokeai
        run: cat ~/.invokeai

      - name: Run the tests
        id: run-tests
        env:
          # Set offline mode to make sure configure preloaded successfully.
          HF_HUB_OFFLINE: 1
          HF_DATASETS_OFFLINE: 1
          TRANSFORMERS_OFFLINE: 1
        run: |
          time ${{ env.pythonLocation }}/bin/python scripts/invoke.py \
            --no-patchmatch \
            --no-nsfw_checker \
            --model ${{ matrix.stable-diffusion-model }} \
            --from_file ${{ env.TEST_PROMPTS }} \
            --root="${{ env.INVOKEAI_ROOT }}" \
            --outdir="${{ env.INVOKEAI_ROOT }}/outputs"

      - name: Archive results
        id: archive-results
        uses: actions/upload-artifact@v3
        with:
          name: results_${{ matrix.requirements-file }}_${{ matrix.python-version }}
          path: ${{ env.INVOKEAI_ROOT }}/outputs
